{
    "count": 206,
    "next": "https://www.udemy.com/api-2.0/users/me/subscribed-courses/?fields%5Bcourse%5D=completion_ratio%2Cenrollment_time%2Clast_accessed_time%2Cnum_collections%2Cpublished_title%2Ctitle%2Ctracking_id%2Curl%2Cdescription%2Cvisible_instructors&fields%5Buser%5D=%40min%2Cjob_title&is_archived=false&ordering=-last_accessed&page=7&page_size=12",
    "previous": "https://www.udemy.com/api-2.0/users/me/subscribed-courses/?fields%5Bcourse%5D=completion_ratio%2Cenrollment_time%2Clast_accessed_time%2Cnum_collections%2Cpublished_title%2Ctitle%2Ctracking_id%2Curl%2Cdescription%2Cvisible_instructors&fields%5Buser%5D=%40min%2Cjob_title&is_archived=false&ordering=-last_accessed&page=5&page_size=12",
    "results": [
      {
        "_class": "course",
        "id": 1464072,
        "title": "Java Certification : OCA (1Z0-808) Exam Simulation [2022]",
        "url": "/course/java-oca/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 15168548,
            "title": "Udayan Khattry",
            "name": "Udayan",
            "display_name": "Udayan Khattry",
            "job_title": "SCJP, SCWCD & Oracle Database SQL Certified Expert"
          }
        ],
        "published_title": "java-oca",
        "tracking_id": "RCLp55qjT4-nVIJD6T-fYA",
        "description": "<p><strong>Are you ready to pass&nbsp;OCA-&nbsp;Java SE 8 Programmer I&nbsp;certification and prove your competency to recruiters and&nbsp;employers alike?</strong></p><p><br></p><p>The practice test questions have already helped <strong>485 students</strong> to pass the OCA Certification (1Z0-808) exam.</p><p><strong>************************ WALL&nbsp;OF&nbsp;FAME&nbsp;for 1Z0-808 ************************</strong></p><p><strong>2022:</strong></p><p><em>1.&nbsp; Miriam Noronha [02-Nov-2022] </em><strong><em>{NEW FORMAT}</em></strong></p><p><em>2.&nbsp; Andre Bielser [02-Nov-2022] </em><strong><em>{NEW FORMAT}</em></strong></p><p><em>3.&nbsp; Metodi Paskov [14-Oct-2022] </em><strong><em>{NEW FORMAT}</em></strong></p><p><em>4.&nbsp; Arnold Teo [09-Oct-2022] </em><strong><em>{NEW FORMAT}</em></strong></p><p><em>5.&nbsp; Ambar Kundu [10-Sep-2022] </em><strong><em>{NEW FORMAT}</em></strong></p><p><em>6.&nbsp; Andrei Panait [06-Sep-2022] </em><strong><em>{NEW FORMAT}</em></strong></p><p><em>7.&nbsp; Alexandra Hajdu [21-Aug-2022]</em></p><p><em>8.&nbsp; El Hadji Omar</em></p><p><em>9.&nbsp; Soyoung Lee</em></p><p><em>10. Smail Alhiane</em></p><p><em>11. Duy Tuan Nguyen</em></p><p><em>12. Indrajit D</em></p><p><em>13. Magdalena</em></p><p><em>14. BalaGangadharaTilak Kolasani</em></p><p><em>15. Mohit Garg</em></p><p><em>16. Baoluuthien</em></p><p><em>17. Mayank Sharma</em></p><p><em>18. Dao Dang</em></p><p><em>19. Majewski Piotr</em></p><p><em>20. Lý Văn Quang Trung</em></p><p><em>21. Touhidul Islam</em></p><p><em>22. Mark Benjamin Dsouza</em></p><p><em>23. Dhananjay Singh Chauhan</em></p><p><em>24. Sourasish Chakraborty</em></p><p><em>25. Jonny Daidone</em></p><p><em>26. Nemanja Broceta</em></p><p><em>27. Amrendra Kumar Singh</em></p><p><em>28. Muthu Kumar</em></p><p><em>29. Karu</em></p><p><em>30. Arno Snyman</em></p><p><em>31. Mohanesvar</em></p><p><em>32. B.D. Nisal Pubudu Kumara</em></p><p><em>33. Reginaldo Cardoso Domingos</em></p><p><em>34. Alexson Scheppa Peisino</em></p><p><em>35. Anonymous</em></p><p><em>36. José Manuel Cuenca Lerma</em></p><p><em>37. Adam Wynette</em></p><p><em>38. Vivek Pandian Kamaraj</em></p><p><em>39. Pushpender</em></p><p><em>40. Rodolfo Gomes</em></p><p><em>41. Huai Chiu</em></p><p><br></p><p><strong>2021:</strong></p><p><em>1.&nbsp; Anuja Mehta [27-Dec-2021]</em></p><p><em>2.&nbsp; Salmi Ismail [23-Dec-2021]</em></p><p><em>3.&nbsp; Mattia Pomobello [22-Dec-2021]</em></p><p><em>4.&nbsp; Utkarsh Jaiswal [20-Dec-2021]</em></p><p><em>5.&nbsp; Dzmitry Zharykau [16-Dec-2021]</em></p><p><em>6.&nbsp; Hovhannes Kiramijyan [13-Dec-2021]</em></p><p><em>7.&nbsp; Ravindu Fernando [12-Dec-2021]</em></p><p><em>8.&nbsp; Ilya Okonechnikov</em></p><p><em>9.&nbsp; Marcin Zglenicki</em></p><p><em>10. Chandresh Thakkar</em></p><p><em>11. Yissachar Liknaitzky</em></p><p><em>12. Giangnxt</em></p><p><em>13. Filip Súkeník</em></p><p><em>14. Pierre Donato Fortunato</em></p><p><em>15. Meet Patel</em></p><p><em>16. Gabriel</em></p><p><em>17. Cosmin Cofan</em></p><p><em>18. Wessel</em></p><p><em>19. Tejaswini Kshirsagar</em></p><p><em>20. Andrea Patrese</em></p><p><em>21. Mohamed Ahmed</em></p><p><em>22. Maithily</em></p><p><em>23. Yacine</em></p><p><em>24. Francis Nana-Dabankah</em></p><p><em>25. Miguel G</em></p><p><em>26. Rick de Ruiter</em></p><p><em>27. Srikant Srinivasan</em></p><p><em>28. Xiao Wei Sha</em></p><p><em>29. Jenish Kumar</em></p><p><em>30. Kislaya Aakash</em></p><p><em>31. Johannes Ringmark</em></p><p><em>32. Pablo Davila</em></p><p><em>33. Everton Morais</em></p><p><em>34. Diegues G Roveda</em></p><p><em>35. Samuel N</em></p><p><em>36. Carlos Rafael Labrada Arce</em></p><p><em>37. Helber Fernandes de França</em></p><p><em>38. Md Salah Uddin Mahtab</em></p><p><em>39. Vikas Rana</em></p><p><em>40. Dinh Phu</em></p><p><em>41. Hebert Tourne Perez</em></p><p><em>42. Maxim</em></p><p><em>43. Maksym Lutovinov</em></p><p><em>44. Jay</em></p><p><em>45. Jijo</em></p><p><em>46. Shridha Jalihal</em></p><p><em>47. Rahul Pradhan</em></p><p><em>48. Sweety Jain</em></p><p><em>49. Santanu Bhar</em></p><p><em>50. Sagun Goyal</em></p><p><em>51. Tomas Chovanec</em></p><p><em>52. Venkata N R Desaraju</em></p><p><em>53. Teena John</em></p><p><em>54. Thomas Garcia</em></p><p><em>55. Yassine Bouhamed</em></p><p><em>56. Alden</em></p><p><em>57. Lehel Mezei</em></p><p><em>58. George Kazazishvili</em></p><p><em>59. Anurag Tiwari</em></p><p><em>60. Christine Roels</em></p><p><em>61. Mohit Jain</em></p><p><em>62. Aaron Quico Garcia</em></p><p><em>63. Ranjan Saha</em></p><p><em>64. Anonymous</em></p><p><em>65. Eun Dong Woo</em></p><p><em>66. Harshit Gupta</em></p><p><em>67. Seema Hiremath</em></p><p><em>68. Hemant Shinde</em></p><p><em>69. Daniele Ruiu</em></p><p><em>70. Parth Bapat</em></p><p><em>71. Olivier Corre</em></p><p><em>72. Nguyen Hung Minh</em></p><p><em>73. Arun Kagatikar</em></p><p><em>74. Katherine Misyutina</em></p><p><em>75. Anonymous</em></p><p><em>76. Prashant</em></p><p><em>77. Vishweshvar V</em></p><p><em>78. Himanshu Joshi</em></p><p><em>79. Sanket Chalke</em></p><p><em>80. Rubiya Sultana</em></p><p><em>81. Akash</em></p><p><em>82. Tamas Wacha</em></p><p><em>83. Peter Galvin</em></p><p><em>84. Pop Florin</em></p><p><em>85. William Raymond Burnham</em></p><p><em>86. Ricardo Franco</em></p><p><em>87. Krishnan Kumar</em></p><p><em>88. Neena Anilkumar</em></p><p><em>89. Simona Vinitor</em></p><p><em>90. Omar Asaad</em></p><p><em>91. Eren Senturk</em></p><p><em>92. Szegedi Lorand</em></p><p><em>93. Beyza Duymayan</em></p><p><br></p><p><strong>2020:</strong></p><p><em>1.&nbsp; Nguyễn Việt Đức [30-Dec-2020]</em></p><p><em>2.&nbsp; Syed Ali [30-Dec-2020]</em></p><p><em>3.&nbsp; Atila Izac Pereira da Silva [23-Dec-2020]</em></p><p><em>4.&nbsp; Aparna [21-Dec-2020]</em></p><p><em>5.&nbsp; Vishal [21-Dec-2020]</em></p><p><em>6.&nbsp; T. Yassine Latiri [17-Dec-2020]</em></p><p><em>7.&nbsp; Sharon [17-Dec-2020]</em></p><p><em>8.&nbsp; Michael Vincent Enriquez</em></p><p><em>9.&nbsp; Salman</em></p><p><em>10. Sergii Diukarev</em></p><p><em>11. Saipronoti Mukherjee</em></p><p><em>12. Yera Soni</em></p><p><em>13. Andrey Guzev</em></p><p><em>14. Luis Mauricio Alamo</em></p><p><em>15. Rabia Karapinar</em></p><p><em>16. Mohammed Benali</em></p><p><em>17. TheDeven</em></p><p><em>18. Kenyi Galvez Suma</em></p><p><em>19. Anthony Oswaldo Flores Carrasco</em></p><p><em>20. Anderson Felipe</em></p><p><em>21. Luyanda.T. Mkhize</em></p><p><em>22. Giuseppe Maggio</em></p><p><em>23. PuckSchool</em></p><p><em>24. Uğur Yeşilyurt (Saklama)</em></p><p><em>25. Sahar Pourkarimi</em></p><p><em>26. Kulani Makhubele</em></p><p><em>27. Mahesh Chowdary Basineni</em></p><p><em>28. Collen Makwelo</em></p><p><em>29. Vladislav Tovt</em></p><p><em>30. Vaibhav</em></p><p><em>31. Sandra Kostic</em></p><p><em>32. Kum Kindeh Kuzekeseh</em></p><p><em>33. Vinod</em></p><p><em>34. Monica Murphy</em></p><p><em>35. Alexander Ponomarev</em></p><p><em>36. Bongokuhle Dladla</em></p><p><em>37. Gursimar Singh</em></p><p><em>38. Grzegorz Ozimski</em></p><p><em>39. Md Ashraf Al Mamun</em></p><p><em>40. Viettn24 Tiến</em></p><p><em>41. Александр Сорокин</em></p><p><em>42. Gulhan Karali</em></p><p><em>43. Mukta Pradhan</em></p><p><em>44. Satish Kumar P</em></p><p><em>45. Ventsislav Draganov</em></p><p><em>46. Augusto Moro</em></p><p><em>47. Bonwoong</em></p><p><em>48. Anupama Pasyavala</em></p><p><em>49. Denis Mioković</em></p><p><em>50. Anastacio Rodríguez García</em></p><p><em>51. Dumitru Teodor Madalin</em></p><p><em>52. Mohammed EL KHALIFI</em></p><p><em>53. Stanislas Toh</em></p><p><em>54. Neville Sweet</em></p><p><em>55. Aurora Vismara</em></p><p><em>56. Kovács Róbert</em></p><p><em>57. Erika Fernandes</em></p><p><em>58. Bartłomiej Przewoźniak</em></p><p><em>59. Juan Sebastian Suaza Solano</em></p><p><em>60. Kevin Adam Hutama</em></p><p><em>61. Yen Han Sern</em></p><p><em>62. João Costa</em></p><p><em>63. Saloni Jain</em></p><p><em>64. Cleilson Sousa</em></p><p><em>65. Romildo Jozué Paiter</em></p><p><em>66. Yang Wang</em></p><p><em>67. Mayank Minglani</em></p><p><em>68. Plamena Topacharova</em></p><p><em>69. Mohan Khatri</em></p><p><em>70. Marco Marangon</em></p><p><em>71. Fábio Santos</em></p><p><em>72. Karanam Akshit</em></p><p><em>73. Gerardas Balnius</em></p><p><em>74. Yevhen Fabizhevskyi</em></p><p><em>75. Tangdevon</em></p><p><em>76. Mariam Atitar</em></p><p><em>77. Kerim Dogan</em></p><p><em>78. Viraj Wagh</em></p><p><em>79. Dario Imperatore</em></p><p><em>80. Ionut Stancu</em></p><p><em>81. Martin Berndt</em></p><p><em>82. Lucas Barros Bonine</em></p><p><em>83. Felix Garcia Lainez</em></p><p><em>84. Krishna Chaitanya</em></p><p><em>85. Azreal</em></p><p><em>86. Raymond</em></p><p><em>87. Carlos Pita</em></p><p><em>88. Marfou Balogun</em></p><p><em>89. Gainutdinov Ruslan</em></p><p><em>90. Ranajit Rakshit</em></p><p><em>91. Ramesh</em></p><p><em>92. Khaoula Ghodhbane</em></p><p><em>93. Nelson Osorio Bedoya</em></p><p><em>94. Pratyusha Mukkerla</em></p><p><em>95. Mikalai Dudko</em></p><p><em>96. Javier Reyes Alonso</em></p><p><em>97. Vasco André Teixeira Rodrigues</em></p><p><em>98. Alessandro Aruta</em></p><p><em>99. Jeff Chee</em></p><p><em>100. Deepali Jain</em></p><p><em>101. John Gregory Jose</em></p><p><em>102. Abdou Hamdane</em></p><p><em>103. Mohd Azhar Raza Qadri</em></p><p><em>104. Luka Odak</em></p><p><em>105. Florian Ciuculescu</em></p><p><em>106. Peter van der Wal</em></p><p><br></p><p><strong>2019:</strong></p><p><em>1.&nbsp; Paweł Kłodziński</em></p><p><em>2.&nbsp; Rym Chebbi</em></p><p><em>3.&nbsp; Wladimir López</em></p><p><em>4.&nbsp; Srisha</em></p><p><em>5.&nbsp; Bandita Mishra</em></p><p><em>6.&nbsp; Abdul Waris</em></p><p><em>7.&nbsp; Zwivhuya Khoza</em></p><p><em>8.&nbsp; Anas Ali</em></p><p><em>9.&nbsp; Agniraj Muthuveeran</em></p><p><em>10. Mounika Pasumarthi</em></p><p><em>11. Anshuman Srivastava</em></p><p><em>12. Surendra Singh Rathore</em></p><p><em>13. Jan Rothen</em></p><p><em>14. Jasheer Kv</em></p><p><em>15. Taha Chaudhry</em></p><p><em>16. Devesh Kaushal</em></p><p><em>17. Shreya Singh</em></p><p><em>18. Manuel</em></p><p><em>19. Shreyasi Samanta</em></p><p><em>20. Jason Argo</em></p><p><em>21. Gustavo Hernandez</em></p><p><em>22. Иван</em></p><p><em>23. Formoso Antoine</em></p><p><em>24. Luis Benavides</em></p><p><em>25. Servando Gamez</em></p><p><em>26. Chetan K S</em></p><p><em>27. Daniel Sanchez</em></p><p><em>28. Rohit Kumar</em></p><p><em>29. Somayan Goswami</em></p><p><em>30. Selinatis</em></p><p><em>31. Carlos Antonioni</em></p><p><em>32. Pethryth</em></p><p><em>33. Paryush Jain</em></p><p><em>34. Merwais Muafaq</em></p><p><em>35. Daniel Asanome</em></p><p><em>36. Jacek Polak</em></p><p><em>37. Manan Arora</em></p><p><em>38. Abhishek Bhattacharya</em></p><p><em>39. John Naska</em></p><p><em>40. Oscar Fernández Armengol</em></p><p><em>41. Ioanna Anastasaki</em></p><p><em>42. Prem Motgi</em></p><p><em>43. Mandar Deshpande</em></p><p><em>44. Ievgen Vorobei</em></p><p><em>45. Chiradeep</em></p><p><em>46. Mohamed Ali AMDOUNI</em></p><p><em>47. Lộc Tống Bảo</em></p><p><em>48. Andrea Pagana</em></p><p><em>49. Gonzalo Nicolas Castillo Fajardo</em></p><p><em>50. Dragana Popovic</em></p><p><em>51. Ilkin Ismailov</em></p><p><em>52. Wrongtheory</em></p><p><em>53. Matteo Daniele</em></p><p><em>54. Simone Russo</em></p><p><em>55. Amanuel Bogale</em></p><p><em>56. Kevin McClung</em></p><p><em>57. Lokeswara Rao Majji</em></p><p><em>58. Daniele</em></p><p><em>59. Johannes R</em></p><p><em>60. Igor Leonardo Pereira da Silva</em></p><p><em>61. Jason Shiffler</em></p><p><em>62. Tim Stephens</em></p><p><em>63. Henry Schroeder</em></p><p><em>64. Ldounya</em></p><p><em>65. Lukasz</em></p><p><em>66. Raghavi</em></p><p><em>67. John Craig</em></p><p><em>68. Padmavathi FNU</em></p><p><em>69. Susana Cordova</em></p><p><em>70. Joshua Merrington</em></p><p><em>71. Rebeca Gamboa</em></p><p><em>72. Haftom Mesfin Gebreselassie</em></p><p><em>73. James Sparks</em></p><p><em>74. Sebastian Kociński</em></p><p><em>75. Felix Otto</em></p><p><em>76. Dipendra Pokahrel</em></p><p><em>77. Ravinder</em></p><p><em>78. Lyle Stramer</em></p><p><em>79. Lorenzo Vicente Grimaldi Velasco</em></p><p><em>80. Dharambir Singh</em></p><p><em>81. Michael Egger</em></p><p><em>82. Daniel Braga Moura</em></p><p><em>83. Andrés Solé Castillo</em></p><p><em>84. André Peixoto</em></p><p><em>85. Monica Paz Coutinho</em></p><p><em>86. Thando</em></p><p><em>87. Cameron W Beeler</em></p><p><em>88. Pheba Kunjappan</em></p><p><strong><em>89. Venkata Narasimha Rao Sandu (1Z0-815)</em></strong></p><p><em>90. Conrad Nelson</em></p><p><em>91. Joanna Legiedz</em></p><p><em>92. Josue Martinez Almazan</em></p><p><em>93. Tedi Panozaqi</em></p><p><em>94. Aneesh Mistry</em></p><p><em>95. Bryan Arce</em></p><p><em>96. T Sanjeeva</em></p><p><em>97. Marcia Arias</em></p><p><em>98. Altin Pellumbi</em></p><p><em>99. Cullen Grover</em></p><p><em>100. Stefano Ciaprini</em></p><p><em>101. 龔柏丞</em></p><p><em>102. Tofan Costel</em></p><p><em>103. Mahlet Sharew</em></p><p><em>104. Ed Santos</em></p><p><em>105. Martin Ferreira</em></p><p><em>106. Nagabushan Kampli</em></p><p><em>107. Christian Cachaya</em></p><p><em>108. Marta Vertechi</em></p><p><em>109. Lhassan Ait Mouss</em></p><p><em>110. Andrew Abraham</em></p><p><em>111. Victor Bozelli Alvarez</em></p><p><em>112. Vinay Bura</em></p><p><em>113. Lok Prakash Pandey</em></p><p><em>114. Iordache-Stoicescu Laurentiu-Iulian</em></p><p><em>115. Aldo Miranda</em></p><p><em>116. Veeksha Poojari</em></p><p><em>117. Ryan Espinosa</em></p><p><em>118. Yurid Marcia Baptista do Amaral Gourgel</em></p><p><em>119. Petro Kostur</em></p><p><em>120. Arpit Vatre</em></p><p><em>121. Levi Lilly</em></p><p><em>122. Igor Kalb</em></p><p><em>123. Pranand Patil</em></p><p><em>124. Haydn Valle</em></p><p><em>125. Timur Babadjanov</em></p><p><em>126. Ahmet Emrebas</em></p><p><em>127. Srihari Chakravarty</em></p><p><em>128. Jesús Juárez de Felipe</em></p><p><em>129. Thomas Thompson</em></p><p><em>130. Erik Englund</em></p><p><em>131. Nhat Tang</em></p><p><em>132. Ediga Shyam Sundhar</em></p><p><em>133. Anthonio Ramarolahy</em></p><p><em>134. Rotariu Cristian</em></p><p><em>135. Leo Kooper</em></p><p><em>136. Cherie Parsons</em></p><p><em>137. Sebastian Kamiński</em></p><p><em>138. Achi Gabeskiria</em></p><p><em>139. Lucas Urry</em></p><p><em>140. Cesar Naja</em></p><p><em>141. David Schneider</em></p><p><em>142. Alisson</em></p><p><em>143. Jorik Barten</em></p><p><em>144. Stipan Beljan</em></p><p><em>145. Sener Gultekin</em></p><p><em>146. Jeroen Bensch</em></p><p><em>147. Jasvinder Singh</em></p><p><em>148. Ola Karlsson</em></p><p><em>149. Sergey Gubarev</em></p><p><em>150. Vincenz Herzog</em></p><p><em>151. Joanna Roczniak</em></p><p><em>152. Luis Fernando</em></p><p><em>153. Jan Nawa</em></p><p><em>154. Chi Bui</em></p><p><em>155. Adrian Trofimov</em></p><p><br></p><p><strong>2018:</strong></p><p><em>1.&nbsp; Thomas F Grady</em></p><p><em>2.&nbsp; Arthur Galiev</em></p><p><em>3.&nbsp; Swetha</em></p><p><em>4.&nbsp; Waseem Saleem Minhas</em></p><p><em>5.&nbsp; Łukasz Zawada</em></p><p><em>6.&nbsp; Shuyu Zhang</em></p><p><em>7.&nbsp; Claudio Merli</em></p><p><em>8.&nbsp; Ashish H Desai</em></p><p><em>9.&nbsp; Ranavir Dash</em></p><p><em>10. Chandrika</em></p><p><em>11. Neha Shrivastava</em></p><p><em>12. Anurag Sharma</em></p><p><em>13. Viacheslav Piliugin</em></p><p><em>14. Stewart Terry</em></p><p><em>15. Sindhuri</em></p><p><em>16. Dmitrii Dmitrenko</em></p><p><em>17. Dmitry Andrushchuk</em></p><p><em>18. Oan S</em></p><p><em>19. Felipe de Oliveira</em></p><p><em>20. Carlos Marin Trejos</em></p><p><em>21. Felix Diaz</em></p><p><em>22. Emmanuelle Joseph Victoria</em></p><p><em>23. Jerome Sharlo</em></p><p><em>24. Thomas BESSET</em></p><p><em>25. Sandeep A P</em></p><p><em>26. Greg Acton</em></p><p><em>27. Wayne Rijsdijk</em></p><p><em>28. Jev Prentice</em></p><p><em>29. Vanius Roberto Bittencourt</em></p><p><em>30. George Cooper</em></p><p><em>31. Yazid Almi</em></p><p><em>32. Dariusz Kulig</em></p><p><em>33. CHIH-HUNG CHIEN</em></p><p><em>34. Gabriel Valdes</em></p><p><em>35. Harshitha D</em></p><p><em>36. Gerwin Callanga</em></p><p><em>37. Eiko Sugimoto</em></p><p><em>38. Jessica Shutler</em></p><p><em>39. Denis Giovan Marques</em></p><p><em>40. Subha S</em></p><p><em>41. Mayank dharwal</em></p><p><em>42. Ajay Virdi</em></p><p><em>43. Perov Dmitry</em></p><p><em>44. Pawel Trzaska</em></p><p><em>45. Mihai Popovici</em></p><p><em>46. Young-min Kim</em></p><p><em>47. Дмитрий Лебедев</em></p><p><em>48. Sunny K</em></p><p><em>49. Allabaksh S.K</em></p><p><em>50. Maurício Generoso</em></p><p><em>51. Vanessa Reese</em></p><p><em>52. Tz-Ruei Liu</em></p><p><em>53. Igor Gindin</em></p><p><em>54. Octavio Ranieri</em></p><p><em>55. Andrea Chittano</em></p><p><em>56. Farzaan Kaiyom</em></p><p><em>57. Daryl Arouchian</em></p><p><em>58. Dimitar Tomov</em></p><p><em>59. Justin Djeumene</em></p><p><em>60. Parul Sharma</em></p><p><em>61. Sanil Panjri</em></p><p><em>62. Farhana Tabassum</em></p><p><em>63. Alessandro Lopes Panaro</em></p><p><em>64. Neepa Chakraborty</em></p><p><em>65. Kim Juhwan</em></p><p><em>66. Vladimir Pepik</em></p><p><em>67. Anurag Reddy</em></p><p><em>68. Carl David Nathanael Wagers</em></p><p><em>69. Toshiaki Ezaki</em></p><p><em>70. Nikita Bhatnagar</em></p><p><em>71. Pradeep Silamkoti</em></p><p><em>72. Mark Griffiths</em></p><p><em>73. Stéphane MORI</em></p><p><em>74. Raghava</em></p><p><em>75. Prabhjot Kohli</em></p><p><em>76. Collin Pointer</em></p><p><em>77. Norbert Gagyi</em></p><p><em>78. Trevon</em></p><p><em>79. Adriana Giuliano</em></p><p><em>80. Teerapat</em></p><p><em>81. Rohit Chauhan</em></p><p><em>82. Ahmet Mert Yavuz</em></p><p><em>83. Kimberly Boynton</em></p><p><em>84. Izaz Ali</em></p><p><em>85. Devendra Yadav</em></p><p><em>86. Eduardo Koerich</em></p><p><em>87. Amit</em></p><p><em>88. Anas P.M</em></p><p><em>89. Jorge Guerra Yerpes</em></p><p><em>90. Beknazar Suranchiyev</em></p><p><br></p><p><strong>See what fellow students are saying:</strong></p><p><strong><em>29-May-2021: \"Thanks heaps for putting this course together. This course has helped a lot. I cleared the exam today (29th May) with 86%. Thanks again !!\" </em></strong>- Venkata N R Desaraju</p><p><br></p><p><strong><em>10-May-2021: \"I passed the exam today (87%). Thank you for these materials, I am simply just not able to emphasize, how much these questions helped me through the preparation. Awesome course, keep up the good work! :)\" </em></strong>- Lehel Mezei</p><p><br></p><p><strong><em>18-Apr-2021: \"It is a very good preparation to the OCA. I passed the exam in April 2021. I felt confident and I knew what to watch out for thanks to these exam simulations.\"</em></strong> - Christine Roels</p><p><br></p><p><strong><em>11-Mar-2021: \"Very useful for preparation for exam. I cleared the OCJA 8 exam with 89%\"</em></strong> - Arun Kagatikar</p><p><br></p><p><strong><em>10-Mar-2021: \"Excellent exams and explanations, helped me pass the OCA.\" </em></strong>- Katherine Misyutina</p><p><br></p><p><strong><em>01-Mar-2021: \"This course is perfectly designed to prepare for OCA IZO-808. Total of 6 tests, given in the order of increasing difficulty helps to prepare without loosing confidence.\"</em></strong> - Vishweshvar V</p><p><br></p><p><strong><em>28-Feb-2021: \"Great questions to test your understanding of the concepts. Also the explanations provided for every question is very helpful. I have cleared my exam on 27/2/2021 with 90% Thank you Udayan :)\"</em></strong> - Sanket Chalke</p><p><br></p><p><strong><em>29-Jan-2021: \"The best course for OCA Java SE 8 you can get on Udemy. Really great explanations and good variety of questions.\"</em></strong> - Krishnan Kumar</p><p><br></p><p><strong><em>04-Jan-2020: \"I took my exam two days ago from home and passed on the first try. I tried Whizlabs and this course. In my opinion, this Udemy course was the closest to the format and type of questions given on the exam compared to Whizlabs.\" </em></strong>- Beyza Duymayan</p><p><br></p><p><strong><em>21-Dec-2020: \"Today, I cleared the OCJA Certification Exam and this material was very helpful, simulation very close to the real exam, in terms on complexity. Thanks to Udayan !!\" </em></strong>- Aparna</p><p><br></p><p><strong><em>11-Dec-2020: \"This course has played a pivotal role in my journey to clear the OCA exam by providing a huge number of practice questions. The explanations for the questions are really good and help brush up certain concepts which require revision. Overall, this is a great course and I am really happy to have taken it since it helped build my overall understanding of Java. Big sense of gratitude for this one!\"</em></strong> - Saipronoti Mukherjee</p><p><br></p><p><strong><em>10-Dec-2020: \"Excelente, las pruebas mock me ayudaron a corregir mis falencias y aprobar la certificación.\"</em></strong> - Luis Mauricio Alamo</p><p><br></p><p><strong><em>30-Nov-2020: \"Me sirvió bastante y logré obtener mi certificado OCA!\"</em></strong> - Kenyi Galvez Suma</p><p><br></p><p><strong><em>30-Nov-2020: \"Muy buen curso, las preguntas son muy similares al de la certificación, justo acabo de darlo y me fue muy bien, buen trabajo.\"</em></strong> - Anthony Oswaldo Flores Carrasco</p><p><br></p><p><strong><em>26-Nov-2020: \"acabei de passar na prova Java SE 8 Programmer I Exam Number: 1Z0-808 e o curso me ajudou muito!! Muito obrigado.\"</em></strong> - Anderson Felipe</p><p><br></p><p><strong><em>09-Nov-2020: \"Thanks Udayan for the great practice exams and explanations! Got my OCA certification with 83% today.\"</em></strong> - Uğur Yeşilyurt (Saklama)</p><p><br></p><p><strong><em>29-Oct-2020: \"A very good preparation for the exam that includes many questions with in-depth explanations. It helped me a lot. Thanks\"</em></strong> - Sahar Pourkarimi</p><p><br></p><p><strong><em>28-Oct-2020: \"Today i have passed my exam. This course helped me a lot. Thanks :-)\" </em></strong>- Mahesh Chowdary Basineni</p><p><br></p><p><strong><em>13-Oct-2020: \"I am very satisfied with the Exam Simulation. It helped me a lot. I have successfully passed my OCA Java 8 exam yesterday :)\"</em></strong> - Sandra Kostic</p><p><br></p><p><strong><em>12-Oct-2020: \"Well, This course is amazing, This should be taken after you clear your concepts on java. The questions are not straightforward will test your java skills. I fee I should revisit this course every 6 months. The Instructor is prompt to respond to your queries. Thank you Udayan for your help! And finally, I have successfully cleared my OCA (Happy to share)!\"</em></strong> - Vinod</p><p><br></p><p><strong><em>04-Sep-2020: \"Amazing course. I pass OCA (1Z0-808) today, 89%. Thank you so much......!!!!\"</em></strong> - Viettn24 Tiến</p><p><br></p><p><strong><em>16-Aug-2020: \"This course is excellent. I just passed the OCA Certification: 93% score. It was very helpful! Thank you so much!!!\"</em></strong> - Augusto Moro</p><p><br></p><p><strong><em>15-Jul-2020: \"I just passed the OCA Certification: 86% score. I absolutely recommand this simulation, it was very helpful! Thank you so much!!\"</em></strong> - Aurora Vismara</p><p><br></p><p><strong><em>22-Jun-2020: \"Hola Udayan, muchas gracias por estas pruebas hoy he aprobado el examen de certificación Muchas gracias\"</em></strong> - Juan Sebastian Suaza Solano</p><p><br></p><p><strong><em>05-Jun-2020: \"Hi man, thanks for you work, It was very, very helpful to OCA pass an real exam this exam simulation help me. Today I passed OCA exam. Thank you very much Mr. Udayan.\" </em></strong>- Romildo Jozué Paiter</p><p><br></p><p><strong><em>04-Jun-2020: \"passed the 808 exam on 4th of June, thanks for this great course\" </em></strong>- Yang Wang</p><p><br></p><p><strong><em>04-Jun-2020: \"I gave my Java 808 exam today and cleared with 81%. Thanks Udayan for this practice test exams. They were very helpful.\"</em></strong> - Mayank Minglani</p><p><br></p><p><strong><em>29-May-2020: \"Very helpful OCA exam simulation. Today I passed OCA exam. Thank you very much Mr. Udayan.\"</em></strong> - Mohan Khatri</p><p><br></p><p><strong><em>08-Apr-2020: \"Thank you Udayan. I passed the OCA exam yesterday with %81. Even though I finished one book before your tests, the questions in your tests and the explanations made a lot clear how the logic of the compiler works. For me the OCA test was not easy, but going over your tests a few times I was able to pass. Great work!\"</em></strong> - Kerim Dogan</p><p><br></p><p><strong>OCA -&nbsp;Java SE 8 Programmer I -&nbsp;Exam Information: [NEW FORMAT effective September 1, 2022]</strong><br></p><ul><li><p>Exam Code: 1Z0-808</p></li><li><p>Duration: 120 minutes</p></li><li><p>Questions #: 56 (Multiple Choice / Multiple Select)</p></li><li><p>Passing score: 65%&nbsp;</p></li></ul><p><br></p><p><strong>Exam Curriculum:</strong></p><p><strong>Java Basics&nbsp;</strong></p><ul><li><p>Define the scope of variables&nbsp;</p></li><li><p>Define the structure of a Java class</p></li><li><p>Create executable Java applications with a main method; run a Java program from the command line; produce console output</p></li><li><p>Import other Java packages to make them accessible in your code</p></li><li><p>Compare and contrast the features and components of Java such as: platform independence, object orientation, encapsulation, etc.</p></li></ul><p><strong><br></strong></p><p><strong>Working With Java Data Types&nbsp;</strong></p><ul><li><p>Declare and initialize variables (including casting of primitive data types)</p></li><li><p>Differentiate between object reference variables and primitive variables</p></li><li><p>Know how to read or write to object fields</p></li><li><p>Explain an Object's Lifecycle (creation, \"dereference by reassignment\" and garbage collection)</p></li><li><p>Develop code that uses wrapper classes such as Boolean, Double, and Integer &nbsp;</p></li></ul><p><strong><br></strong></p><p><strong>Using Operators and Decision Constructs&nbsp;</strong></p><ul><li><p>Use Java operators; use parentheses to override operator precedence</p></li><li><p>Test equality between Strings and other objects using == and equals ()</p></li><li><p>Create if and if/else and ternary constructs&nbsp;</p></li><li><p>Use a switch statement&nbsp;</p></li></ul><p><strong><br></strong></p><p><strong>Creating and Using Arrays&nbsp;</strong></p><ul><li><p>Declare, instantiate, initialize and use a one-dimensional array</p></li><li><p>Declare, instantiate, initialize and use multi-dimensional arrays</p></li></ul><p><strong><br></strong></p><p><strong>Using Loop Constructs&nbsp;</strong></p><ul><li><p>Create and use while loops</p></li><li><p>Create and use for loops including the enhanced for loop</p></li><li><p>Create and use do/while loops</p></li><li><p>Compare loop constructs</p></li><li><p>Use break and continue &nbsp;</p></li></ul><p><strong><br></strong></p><p><strong>Working with Methods and Encapsulation&nbsp;</strong></p><ul><li><p>Create methods with arguments and return values; including overloaded methods</p></li><li><p>Apply the static keyword to methods and fields &nbsp;</p></li><li><p>Create and overload constructors; differentiate between default and user defined constructors</p></li><li><p>Apply access modifiers</p></li><li><p>Apply encapsulation principles to a class</p></li><li><p>Determine the effect upon object references and primitive values when they are passed &nbsp;into methods that change the values</p></li></ul><p><strong><br></strong></p><p><strong>Working with Inheritance&nbsp;</strong></p><ul><li><p>Describe inheritance and its benefits</p></li><li><p>Develop code that makes use of polymorphism; develop code that overrides methods; &nbsp;differentiate between the type of a reference and the type of an object</p></li><li><p>Determine when casting is necessary</p></li><li><p>Use super and this to access objects and constructors</p></li><li><p>Use abstract classes and interfaces</p></li></ul><p><strong><br></strong></p><p><strong>Handling Exceptions&nbsp;</strong></p><ul><li><p>Differentiate among checked exceptions, unchecked exceptions, and Errors</p></li><li><p>Create a try-catch block and determine how exceptions alter normal program flow</p></li><li><p>Describe the advantages of Exception handling&nbsp;</p></li><li><p>Create and invoke a method that throws an exception</p></li><li><p>Recognize common exception classes (such as NullPointerException, ArithmeticException, ArrayIndexOutOfBoundsException, ClassCastException)</p></li></ul><p><strong><br></strong></p><p><strong>Working with Selected classes from the Java API&nbsp;</strong></p><ul><li><p>Manipulate data using the StringBuilder class and its methods</p></li><li><p>Create and manipulate Strings</p></li><li><p>Create and manipulate calendar data using classes from java.time.LocalDateTime, &nbsp;java.time.LocalDate, java.time.LocalTime, java.time.format.DateTimeFormatter, java.time.Period</p></li><li><p>Declare and use an ArrayList of a given type&nbsp;</p></li><li><p>Write a simple Lambda expression that consumes a Lambda Predicate expression</p></li></ul><p><strong><br></strong></p><p><strong>Practice tests</strong> are randomized to give a real examination feel. All topics listed above&nbsp;are divided appropriately in&nbsp;<strong>4 tests consisting 70 questions&nbsp;each i.e.,&nbsp;280 questions in total </strong>and<strong> 2 bonus tests containing 72 questions each (144 bonus questions)</strong>, which makes <strong>total 424 unique questions</strong>. Questions are designed based on real examination questions in terms of pattern and complexity.&nbsp;<br></p><p><strong>Explanation</strong> of all the correct answers is also provided for reference and understanding. Relevant hints and how to approach a question in real examination setting is also provided in explanation.</p><p>Completing all the tests successfully will boost your confidence to attempt Oracle&nbsp;Certified&nbsp;Associate (OCA)&nbsp;examination.&nbsp;</p><p>More information on detailed curriculum and assumptions to be followed for examination are available on oracle certification page.<br></p><p><strong><em>NOTE: Each practice test of this course contains questions on all the exam topics, similar to what is expected in real exam. But if you prefer to solve topic-wise questions, then enroll in my other course titled&nbsp;\"Java Certification - OCA (1Z0-808) Topic-wise Tests [2022]\", which contains the same questions arranged in topic-wise manner.</em></strong><br></p><p><strong><em>Disclaimer: These questions are not real examination&nbsp;questions / dumps. These questions&nbsp; are created to evaluate your preparation for certification exam.&nbsp;</em></strong></p><p><br></p><p>So, grab a cup of coffee or your favorite drink and test your Exam Preparation.</p><p><strong>Features of Practice Tests:</strong></p><ul><li><p>You can pause the test at any time and resume later.</p></li><li><p>You can retake the test as many times as you would like.</p></li><li><p>The progress bar at the top of the screen will show your progress as well as the time remaining in the test. If you run out of time, don’t worry; you will still be able to finish the test.</p></li><li><p>You can skip a question to come back to at the end of the exam.</p></li><li><p>You can also use “Mark for Review” to come back to questions you are unsure about before you submit your test.</p></li><li><p>If you want to finish the test and see your results immediately, press the stop button.&nbsp;</p></li></ul><p><br></p><p><strong><em>Copyright © 2022 Udayan Khattry</em></strong></p><p><strong><em>All rights reserved. No part of this course may be reproduced in any form or by any electronic or mechanical means, including information storage and retrieval systems, without permission in writing from the author.</em></strong></p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T08:09:11Z",
        "enrollment_time": "2022-01-05T03:54:34Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 4385642,
        "title": "Batch Processing with Spring Batch & Spring Boot",
        "url": "/course/data-batch-processing-with-spring-batch-spring-boot-spring-framework/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 4132674,
            "title": "Infybuzz Learning",
            "name": "Infybuzz",
            "display_name": "Infybuzz Learning",
            "job_title": "50,000+ students around world with reach to 156 Countries"
          }
        ],
        "published_title": "data-batch-processing-with-spring-batch-spring-boot-spring-framework",
        "tracking_id": "4SceK5BpSQG_q0szk1FznQ",
        "description": "<p><strong><em>***** Some Reviews From Students *****</em></strong></p><ul><li><p><strong><em>i must say, i was searching spring batch course since last 4 month but have not found any so i can get something but this guys how simply explaining about spring batch and make it very easy to understand like its very simple topic seriously finally understanding about spring batch and clearing concept as well.</em></strong></p></li><li><p><strong><em>Awesome Course for Learning Spring Batch with Spring Boot. Nice Explanation with Example(Coding Exercise). Big Thanks.</em></strong></p></li><li><p><strong><em>This course enhanced my understanding of the Spring Batch and the entire workflow of batch processing. The concepts are well explained, illustrated and simplified by the author. Thumbs up for the fantastic delivery</em></strong></p><p><br></p></li></ul><p><strong>In this course you will learn Spring Batch Framework. Spring Batch is an open source framework for batch processing of data.</strong></p><p>First you will learn basics of batch processing and Spring Batch. Also you will learn need of Spring Batch.</p><p>After having basic knowledge of Spring Batch we will go for Job and Step in Spring Batch.</p><p><strong>There are two types of steps provided by Spring Batch.</strong></p><ul><li><p>Tasklet Step</p></li><li><p>Chunk-Oriented Step</p></li></ul><p>First we will go for Tasklet Step. Spring Batch stores metadata information. We will configure Spring Batch App with MySQL database. At runtime we can pass Job Parameters to make our Job dynamic.</p><p>After this we will cover Chunk-Oriented Step.</p><p>There are different options we can launch our job. We can use REST&nbsp;API to trigger job and we can use Spring Scheduler to schedule Spring Batch Job. Also we can stop Job using REST&nbsp;API.</p><p><br></p><p><strong>There are different Item Readers provided by Spring Batch.</strong></p><ul><li><p>CSV Item Reader</p></li><li><p>JSON Item Reader</p></li><li><p>XML Item Reader</p></li><li><p>JDBC Item Reader</p></li><li><p>REST&nbsp;API Item Reader</p></li></ul><p><br></p><p><strong>There are different Item Writers provided by Spring Batch.</strong></p><ul><li><p>CSV Item Writer</p></li><li><p>JSON Item Writer</p></li><li><p>XML Item Writer</p></li><li><p>JDBC Item Writer</p></li><li><p>REST&nbsp;API Item Writer</p></li></ul><p><br></p><p>Spring Batch Provides Item Processor to process data. Item Processor is in between Item Reader &amp; Item Writer. So output of Item Reader is input for Item Processor and output of Item Processor is input for Item Writer.</p><p><br></p><p><strong>Course Topics &amp; Lectures :-</strong></p><p><strong>• Introduction To Spring Batch</strong></p><p>\tBatch Processing with Real World Examples</p><p>\tWhat is Spring Batch ?</p><p>\tWhat is Job &amp; Step ?</p><p>\tStep Types In Spring Batch</p><p>\tSpring Batch Architecture</p><p>\t</p><p><strong>• Getting Started with Spring Batch</strong></p><p>\tCreate First Spring Batch Application</p><p>\tFirst Spring Batch Job with Tasklet Step</p><p>\tSecond Tasklet Step</p><p>\tCustomize Tasklet Step</p><p>\tWhat is Job Instance, Job Execution &amp; Job Execution Context ?</p><p>\tWhat is Step Execution &amp; Step Execution Context ?</p><p>\tConfigure MySQL with Spring Boot</p><p>\tRunning Spring Batch with MySQL</p><p>\tSetting Job Parameter Value</p><p>\tMake Job Parameter Unique</p><p>\tJob Listener</p><p>\tStep Listener</p><p>\t</p><p><strong>• Chunk Oriented Step</strong></p><p>\tOverview of Chunk Oriented Step</p><p>\tCreate First Item Reader</p><p>\tCreate First Item Processor</p><p>\tCreate First Item Writer</p><p>\tCreate Chunk Oriented Step</p><p>\tChunk Oriented Step In Action</p><p>\tChunk Oriented Step without Item Processor</p><p>\tTasklet &amp; Chunk Oriented Steps Together</p><p>\t</p><p><strong>• Job Handling with REST API &amp; Spring Scheduler</strong></p><p>\tJob Launching Property</p><p>\tSpring Batch App with REST API</p><p>\tStart Job with REST API</p><p>\tPassing Job Parameters with REST API</p><p>\tScheduling Job with Spring Scheduler</p><p>\tStop Job with REST API</p><p>\t</p><p><strong>• Working with Item Readers</strong></p><p>\tDifferent Item Readers</p><p>\tOverview of Flat File Item Reader</p><p>\tCreate Flat File Item Reader with CSV File</p><p>\tFlat File Item Reader In Action</p><p>\tChange Delimiter with Flat File Item Reader</p><p>\tPass File Name as Parameter</p><p>\tCustomize Flat File Item Reader</p><p>\tJSON File as Datasource</p><p>\tCreate JSON Item Reader</p><p>\tJSON Item Reader In Action</p><p>\tXML File as Datasource</p><p>\tCreate XML Item Reader</p><p>\tXML Item Reader In Action</p><p>\tMySQL Database as Datasource</p><p>\tCreate JDBC Item Reader with MySQL Database</p><p>\tJDBC Item Reader In Action</p><p>\tMultiple Spring Datasource with MySQL</p><p>\tREST API as Datasource</p><p>\tCreate REST API Item Reader</p><p>\tREST API Item Reader In Action</p><p>\t</p><p><strong>• Working with Item Writers</strong></p><p>\tDifferent Item Writers</p><p>\tCreate Flat File Item Writer with CSV File</p><p>\tFlat File Item Writer In Action</p><p>\tJSON Item Writer</p><p>\tWorking with Item Processor</p><p>\tXML Item Writer</p><p>\tJDBC Item Writer with MySQL Database</p><p>\tJDBC Item Writer Using Prepared Statement</p><p>\tHaving POST API To Write</p><p>\tREST API Item Writer</p><p><br></p><p><strong>• Fault Tolerance with Spring Batch</strong></p><p>\tIntroduction To Fault Tolerance</p><p>\tWhy Fault Tolerance For your Spring Batch Job ?</p><p>\tSkip Bad Records</p><p>\tCapturing Bad Records While Reading Data</p><p>\tCapturing Bad Records While Processing Data</p><p>\tCapturing Bad Records While Writing Data</p><p>\tCapture Records using SkipListener</p><p>\tIntroduction To Retry Mechanism</p><p>\tRetry Mechanism In Action</p><p><br></p><p><strong>• Real Time Use Case with Database Migration</strong></p><p>\tDatabase Migration (PostgreSQL To MySQL) with Spring Batch</p><p>\tDownload and Install PostgreSQL</p><p>\tSetup Data In PostgreSQL &amp; ER Diagram</p><p>\tUsing Latest Version of Spring Boot</p><p>\tConfigure Spring Boot with Spring Data JPA</p><p>\tJPA Entities For MySQL &amp; PostgreSQL</p><p>\tEntityManagerFactory For MySQL &amp; PostgreSQL</p><p>\tJpa Item Reader</p><p>\tJpa Item Writer</p><p>\tJpa Item Reader &amp; Writer with Processor</p><p>\tDatabase Migration In Action</p><p>\tJob Parameters To Make Migration Dynamic</p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T08:08:23Z",
        "enrollment_time": "2022-03-09T18:01:00Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 3698214,
        "title": "Event-Driven Microservices, CQRS, SAGA, Axon, Spring Boot",
        "url": "/course/spring-boot-microservices-cqrs-saga-axon-framework/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 43703,
            "title": "Sergey Kargopolov",
            "name": "Sergey",
            "display_name": "Sergey Kargopolov",
            "job_title": "Software developer"
          }
        ],
        "published_title": "spring-boot-microservices-cqrs-saga-axon-framework",
        "tracking_id": "37qUlcOwR6y2pnYsCSnYKA",
        "description": "<p>In this video course, you will learn how to build business logic that spans several <strong>distributed Spring Boot Microservices</strong>.&nbsp; </p><p>This course is designed for beginners and we will start from the basics of Microservices, Spring Boot, and <strong>Spring Cloud</strong>. </p><p>You will learn how to create your very first Spring Boot Microservice and how to handle HTTP&nbsp;requests. You will then learn how to run multiple instances of your Microservice behind an <strong>API&nbsp;Gateway</strong> and how to make them discoverable. This will help you scale up your microservice up and down as needed. </p><p>This video course will also cover <strong>transactions</strong> across multiple distributed Microservices and how to <strong>roll back changes</strong> if an error took place. Transactions is an advanced topic and to be able to build transactional microservices this video course will teach you a few more design patterns. Starting from the very beginning, you will learn how to develop <strong>event-based Microservices</strong> that are absolutely location transparent. </p><p>You will learn how to use a modern and very popular framework for building event-based Microservices called Axon. <strong>Axon Framework</strong> is based on design principles such as <strong>CQRS</strong>(<strong>Command Query Responsibility Segregation</strong>) and <strong>DDD(Domain Driven Design)</strong>. You will learn how to build event-based Microservices using Axon Framework and how to use CQRS and Event Sourcing in your Microservices. </p><p>Finally, you will learn about the <strong>Saga&nbsp;design pattern</strong> and how to group multiple operations into a single transaction. This will help you build business logic that spans multiple distributed Microservices and roll back changes if one operation fails. </p><p>All from the very beginning, to make these advanced topics easier. </p><p><br></p><p><br></p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T08:07:00Z",
        "enrollment_time": "2022-03-07T18:18:03Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 4369754,
        "title": "Building Modern Distributed Systems with Java",
        "url": "/course/building-modern-distributed-systems-with-java/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 48809204,
            "title": "Lukasz Antoniak",
            "name": "Lukasz",
            "display_name": "Lukasz Antoniak",
            "job_title": "IT Architect | ex-Oracle | ex-IBM | ex-HP"
          }
        ],
        "published_title": "building-modern-distributed-systems-with-java",
        "tracking_id": "bKw73mOxTOuABSVQ3IddNw",
        "description": "<p>Significant percentage of large scale enterprises that I have been working with, admitted experiencing performance issues with their business critical applications. Most of production systems have been built on top of legacy, monolith technologies. Recent popularity of <strong>micro-services</strong> will not fulfill its promise of decoupled, <strong>scalable</strong> and <strong>fault-tolerant</strong> systems, unless \"done right\". While entering the world of micro-services, engineers start building distributed applications, where robust remote procedure calls and cluster coordination are a must.</p><p>In this course you will learn about common challenges that appear while designing and implementing <strong>large scale distributed systems</strong>, and how Big-Tech companies solve those problems.</p><p>Technologies, algorithms and design patterns covered in this course:</p><ul><li><p>Service Registry and Discovery, Service Mesh</p></li><li><p>Apache Cassandra</p></li><li><p>ETCD (coordinator managing Kubernetes clusters)</p></li><li><p>Apache Kafka</p></li><li><p>Idempotent service design, retry logic</p></li><li><p>Sharding and Consistent Hashing</p></li><li><p>Client-side Load Balancing, Distributed Tracing, Canary Deployment, Sidecar Pattern, Circuit Breaker</p></li></ul><p>Course will teach you the principles of various distributed systems design, for example master-less vs. with leaders, poll-based vs. push-based, immediate vs. eventual consistency. After completing the course, learning new distributed database technology would be easier, because you will know the common re-used techniques, including their pros and cons.</p><p>My intention is to keep course content <strong>very practical</strong>, with lots of <strong>code examples</strong> and applied <strong>best practices</strong>. For example, I&nbsp;will cover Service Registry and Discovery to the detail, that you will know how to implement your own framework on top of ETCD. Throughout the course, we are going to build <strong>distributed URL shorten service</strong>.</p><p>The course may be a good recap for people preparing for systems design interview.</p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T08:04:59Z",
        "enrollment_time": "2021-12-03T11:54:11Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 1426704,
        "title": "Project Development Using Spring Boot",
        "url": "/course/end-to-end-java-project-development-using-spring-boot/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 8735380,
            "title": "Bharath Thippireddy",
            "name": "Bharath",
            "display_name": "Bharath Thippireddy",
            "job_title": "IT Architect and Best Selling Instructor- 500000+ students"
          }
        ],
        "published_title": "end-to-end-java-project-development-using-spring-boot",
        "tracking_id": "2PDvLMoPRZGZlYaH63CSTQ",
        "description": "<p><strong>The ONLY course that covers the End To End Java Project Development and Also use Angular and&nbsp;React for frontend development while working on those projects.</strong></p><p>---</p><p><strong>Sample of the reviews:</strong></p><p>whether fresher/experience this tutorial is amazingly explained practically. Sir Bharath Thippireddy is so fluent in his explanations that sometimes we fail to realise that we have learnt the complex frameworks so easily just bcz the way he explains in ease! I feel so grateful to b his student. Thanks alot sir! - <strong>Vijay Bundele</strong></p><p><strong>Respond</strong></p><p>I liked this a lot, its wonderful... The way of step by step teaching, presenting the content in very organized way which is too good... also the content is huge which include lots of good information... Being first time learner i learned a lot from this course. Thanks. - <strong>Md Modabbir Hussain.</strong></p><p>Been a great experiencie. Bharath has been very helpful also, whenever asked any question. The videos are very explicit and he walks through everything. - <strong>Gonçalo Faustino</strong></p><p>---</p><p><strong>All source code is available for download</strong></p><p><strong>Responsive Instructor - All questions answered within 24 hours</strong></p><p><strong>Professional video and audio recordings (check the free previews)</strong></p><p>----</p><p>Do you have the knowledge of java and spring framework but do not know how to create an end to end java project, then this course is for you. If you are an experienced java developer who wants to fill in any gaps in your knowledge&nbsp;of creating an enterprise java application then this course is for you too.</p><p>Spring is the most widely used framework in the industry today.&nbsp;Spring Boot makes it super easy to create production ready java applications. You will start this course by learning what micro services are, the different layers that are a part of every java application and the spring modules that should be used across these layers and the ten key classes you will create no matter how many java application you create. You will implement one layer at a time working hands on. You will then create two micro service applications using all the knowledge you gain from those sections.</p><p>The goal of this course is to help you master the concepts of micro services, layers in a java application and java project creation and build an end to end application while exploring the various features of spring. By the time you finish this course, you will have gained the understanding of Java Project Development, Data Access Layer Creation using Spring Data, Presentation Layer Creation using Spring MVC, Utility Classes and more. You will also create REST web services and consume them through the integration layer. You will also implement non functional requirements like logging, security, deployment and more.</p><p><strong>What Will I Learn?</strong></p><p>Master everything required to build an end to end Enterprise&nbsp; Java Application</p><p>Understand the different layers that make up a Enterprise Java Application</p><p>Create a data access layer in two simple steps</p><p>Create the Presentation and Services Layers for your application</p><p>Develop Utility Classes</p><p>Learn how to send emails form your applications</p><p>Use third party libraries in your applications</p><p>Create two end to end mini applications</p><p>Create a AngularJS front end for the Java backend</p><p>Learn how to enable logging</p><p>Implement Security</p><p>Learn the two different ways to deploy your application</p><p>All in simple and easy steps</p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T08:03:55Z",
        "enrollment_time": "2021-12-03T11:54:11Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 1417610,
        "title": "Unit Testing and Test Driven Development in Python",
        "url": "/course/unit-testing-and-tdd-in-python/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 34312674,
            "title": "Richard Wells",
            "name": "Richard",
            "display_name": "Richard Wells",
            "job_title": "Professional software engineer passionate about quality code"
          }
        ],
        "published_title": "unit-testing-and-tdd-in-python",
        "tracking_id": "o7CkypbvTA-2o69x6b4dQQ",
        "description": "<p>Test Driven Development is a key discipline every software developer should practice to ensure the quality of their code.  In this course I'll show you how to use this discipline in your everyday coding practices to help ensure the quality of your code base.</p>\n\n<ul><li><p>In this course we’ll be going over:</p></li><ul><li><p>What is Unit Testing and Test Driven Development and how does it help you.</p></li><li><p>What is the PyTest testing library and how is it used for writing unit tests in Python.</p></li><li><p>How to setup some common Python development environments to use PyTest.</p></li><li><p>What are Test Doubles and how do you implement and use them with unittest.mock.</p></li><li><p>What are some Best Practices for unit testing and Test Driven Development.</p></li><li><p>We’ll also walk through some hands on example programming sessions using TDD in Python.</p></li></ul></ul>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T08:03:35Z",
        "enrollment_time": "2021-12-01T09:36:06Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 2863390,
        "title": "Test Driven Development (TDD) - Beginners Essentials course",
        "url": "/course/draft/2863390/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 44448998,
            "title": "Ignacio Paz",
            "name": "Ignacio",
            "display_name": "Ignacio Paz",
            "job_title": "Certified Agile Coach, Professor"
          }
        ],
        "published_title": "test-driven-development-tdd-essentials-training-course",
        "tracking_id": "-BIhgVwBSySkH0o9RFpC-Q",
        "description": "<p>Hi there, my name is Ignacio Paz. I am an Agile coach, I was a professor in the university for 15 years for Systems Design and Agile methodologies. I applied Test driven development heavily while working as Java Architect for many years.</p><p>I was originally fascinated with Test Driven Development back in the year 2009, at that time I learnt all the key knowledge and I designed a TDD course that I improved over the years and delivered to hundreds of students. I am really excited to be able to bring this course online for all of you!</p><p>Are you looking to give the first right steps with Test Driven development? This course will teach the concepts of TDD in the right way along with its true philosophy before you move to a course with coding. We will see key concepts in depth for unit tests, emergent design, refactoring, test doubles, mocks and stubs.</p><p>This course is for beginners in TDD but it is recommended that you have some previous knowledge in any programming language and understand concepts of object oriented programming. You will start right from the beginning and work our way through step by step.</p><p>The course has the examples in Java but the concepts can be applied to any language. The code examples are all explained and easy to read by any programmer of other languages like PHP, Python, .Net and more.</p><p>If you have never used unit test or you have already tried junit and are struggling with the basics of unit tests and TDD, this course is for you and together we will learn the right mindset to work with Test driven development.</p><p><strong>About me</strong></p><p>Hi, my name is Ignacio.</p><p>I am the <strong>author of books,</strong> and I have more than <strong>100,000 students</strong> and 17 courses.</p><p>My main goal is to help you with new knowledge that you can apply at work and be a successful and professional leader.</p><p>I am a <strong>Certified Agile Team Coach</strong>. I led, <strong>coached</strong>, led, and managed <strong>Agile</strong> projects and <strong>Scrum</strong> teams since 2005 for customers from all over the world.</p><p>During my career with intensive learning, I got many advanced scrum certifications including Certified Scrum Professional Scrum Master, Professional Scrum&nbsp;Master II, Certified Professional Scrum Product Owner, Certified Agile Leadership, etc.</p><p>I worked 15 years as a <strong>Professor</strong> for Agile Methodologies and Systems design.</p><p>I love to teach Agile and Scrum and I designed a lot of hours of training that I am bringing online. I prefer to teach with games and activities that can simulate the real world.</p><p>I trained thousands of students in Agile that became top and certified professionals in the industry. <br>Teaching what I learned in my 20 years of experience allows the students to gain realistic learning that they can apply at work.</p><p>Join me and share your experience!</p><p><br></p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T08:02:43Z",
        "enrollment_time": "2021-12-01T09:36:06Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 3611296,
        "title": "Clean Code",
        "url": "/course/writing-clean-code/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 31926668,
            "title": "Academind by Maximilian Schwarzmüller",
            "name": "Academind by Maximilian",
            "display_name": "Academind by Maximilian Schwarzmüller",
            "job_title": "Online Education"
          },
          {
            "_class": "user",
            "id": 13952972,
            "title": "Maximilian Schwarzmüller",
            "name": "Maximilian",
            "display_name": "Maximilian Schwarzmüller",
            "job_title": "AWS certified, Professional Web Developer and Instructor"
          }
        ],
        "published_title": "writing-clean-code",
        "tracking_id": "WgExc6mwRXeE9AsJM6iqnw",
        "description": "<p>As a developer, you should be able to write code which works - of course!</p><p>Unfortunately, a lot of developers <strong>write bad code nonetheless</strong> - even though the code works. Because <strong>\"working code\"&nbsp;is not the same as \"clean code\"</strong>!</p><p><strong>This course teaches you how to write clean code - code which is easy to read and understand by humans, not just computers!</strong></p><p>In this course, you'll learn what exactly clean code is and, more importantly, how you can write clean code. Because if your code is written in a clean way, it's easier to read and understand and therefore easier to maintain. </p><p>Because it's NOT just the computer who needs to understand your code - your colleagues and your future self needs to be able to understand it as well!</p><p>In this course, we'll dive into all the main \"<strong>pain points</strong>\" related to clean code (or bad code - depending on how you look at it) and you will not just learn what makes up bad code but of course also how to turn it into clean code.</p><p><strong>Specifically, you will learn about:</strong></p><ul><li><p>Naming \"things\"&nbsp;(variables, properties, classes, functions, ...)&nbsp;properly and in a clean way</p></li><li><p>Common pitfalls and mistakes you should avoid when naming things</p></li><li><p>Comments and that most of them are bad</p></li><li><p>Good comments you might consider adding to your code</p></li><li><p>Code formatting - both horizontal and vertical formatting</p></li><li><p>Functions and how to limit the number of function parameters</p></li><li><p>How to write clean functions by focusing on \"one thing\"</p></li><li><p>How levels of abstraction help you split functions and keep them small</p></li><li><p>How to write DRY functions and avoid unexpected side effects</p></li><li><p>Avoiding deeply nested control structures with guards and by extracting functionality into functions</p></li><li><p>Errors and error handling as a replacement for if-statements</p></li><li><p>Objects &amp;&nbsp;data containers/&nbsp;data structures and why that differentiation could matter</p></li><li><p>Cohesion and how to write good (small!) classes</p></li><li><p>The Law of Demeter and why it matters for clean code</p></li><li><p>What the SOLID&nbsp;principles are and why they matter when it comes to writing clean code</p></li><li><p>Much more!</p></li></ul><p>This course is a <strong>compilation</strong> of common patterns, best practices, principles and rules related to writing clean code.</p><p>In this course, you'll learn about a <strong>broad variety of concepts, rules, ideas, thoughts and principles</strong> and by the end of course, you'll have a good idea of what to keep in mind when it comes to writing clean code.</p><p>This is <strong>not a design patterns or general patterns course</strong> though - we will entirely <strong>focus</strong> on patterns, rules and concepts that help with <strong>writing clean code</strong> specifically.</p><p>All these concepts and rules are backed up by <strong>examples, code snippets and demos</strong>. And to ensure that you get the most out of this course, and you don't just learn a bunch of theory which you forget soon after, there also are <strong>plenty of challenges</strong> for you to apply what you learned!</p><p>This course uses <strong>Python, JavaScript and TypeScript</strong> for code examples but you <strong>don't need to know these languages</strong> to follow along and get a lot out of the course. In addition, the course does <strong>not focus on a specific programming style or paradigm</strong> (like functional programming, object-oriented programming etc) but instead covers <strong>general concepts and techniques</strong> which <strong>will always apply</strong>.</p><p><strong>What are the course prerequisites?</strong></p><ul><li><p>Basic programming knowledge (no matter which language) is required!</p></li><li><p>You don't need to know any specific programming language or programming paradigm to follow along</p></li><li><p>NO prior experience with writing clean code is required</p></li></ul>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T07:46:23Z",
        "enrollment_time": "2021-11-21T18:10:08Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 4312260,
        "title": "Complete PySpark Developer Course (Spark with Python)",
        "url": "/course/pyspark-developer-course/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 173449498,
            "title": "Sibaram Kumar",
            "name": "Sibaram",
            "display_name": "Sibaram Kumar",
            "job_title": "Data Engineer with 13 Years of Experience."
          }
        ],
        "published_title": "pyspark-developer-course",
        "tracking_id": "obgExC85QM-o5IMcI_wOQw",
        "description": "<p>This is a complete PySpark Developer course for Data Engineers and Data Scientists and others who wants to process Big Data in an effective manner. We will cover below topics and more:</p><ul><li><p>Complete Curriculum for a successful PySpark Developer</p></li><li><p>Set up Hadoop Single Node Cluster and Integrate it with Spark 2.x and Spark 3.x</p></li><li><p>Complete Flow of Installation of Standalone PySpark (Unix and Windows Operating System)</p></li><li><p>Detailed HDFS Commands and Architecture.</p></li><li><p>Python Crash Course</p></li><li><p>Introduction to Spark (Why Spark was Developed, Spark Features, Spark Components)</p></li><li><p>Understand SparkSession</p></li><li><p>Spark RDD Fundamentals</p></li><li><p>How to Create RDDs</p></li><li><p>RDD Operations (Transformations &amp; Actions)</p></li><li><p>Spark Cluster Architecture - Execution, YARN, JVM Processes, DAG Scheduler, Task Scheduler</p></li><li><p>RDD Persistence</p></li><li><p>Spark Shared Variables&nbsp; - Broadcast</p></li><li><p>Spark Shared Variables&nbsp; - Accumulators)</p></li><li><p>Spark SQL Architecture, Catalyst Optimizer, Volcano Iterator Model, Tungsten Execution Engine, Different Benchmarks</p></li><li><p>Difference between Catalyst Optimizer and Volcano Iterator Model</p></li><li><p>Spark Commonly Used Functions - Version, range, createDataFrame, sql, table, SparkContext, conf, read, udf, newSession, stop, catalog etc</p></li><li><p>DataFrame Built-in functions - new column functions, encryption functions, string functions, regexp functions, date functions, null functions, collection functions, na functions, math and statistics functions, explode functions, flatten functions, formatting and json functions</p></li><li><p>What is Partition, </p></li><li><p>What is Repartition</p></li><li><p>What is Coalesce</p></li><li><p>Repartition Vs Coalesce</p></li><li><p>Extraction - csv file, text file, Parquet File, orc file, json file, avro file, hive, jdbc</p></li><li><p>DataFrame Fundamentals </p></li><li><p>What is a DataFrame</p></li><li><p>DataFrame Sources</p></li><li><p>DataFrame Features</p></li><li><p>DataFrame Organization</p></li><li><p>DataFrame Rows,</p></li><li><p>DataFrame Columns</p></li><li><p>DataTypes. Practical examples.</p></li><li><p>Perform ETL Using DataFrame </p><p>&nbsp; &nbsp; -- Extraction APIs</p><p>&nbsp; &nbsp; -- Transformation APIs</p><p>&nbsp; &nbsp; -- Loading APIs</p><p>&nbsp; &nbsp; -- Practical Examples.</p></li><li><p>Optimization and Management - Join Strategies, Driver Conf, Parallelism Configurations, Executor Conf etc</p><p><br></p></li></ul>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T07:44:04Z",
        "enrollment_time": "2021-11-18T19:28:58Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 980798,
        "title": "Spark and Python for Big Data with PySpark",
        "url": "/course/spark-and-python-for-big-data-with-pyspark/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 9685726,
            "title": "Jose Portilla",
            "name": "Jose",
            "display_name": "Jose Portilla",
            "job_title": "Head of Data Science at Pierian Training"
          }
        ],
        "published_title": "spark-and-python-for-big-data-with-pyspark",
        "tracking_id": "PherXye1TxqWqokLL-c1cQ",
        "description": "<p><strong>Learn the latest Big Data Technology - Spark! And learn to use it with one of the most popular programming languages, Python!</strong></p>\n\n<p>One of the most valuable technology skills is the ability to analyze huge data sets, and this course is specifically designed to bring you up to speed on one of the best technologies for this task,<strong> Apache Spark</strong>! The top technology companies like <strong>Google, Facebook, Netflix, Airbnb, Amazon, NASA, </strong>and more are all using <strong>Spark </strong>to solve their big data problems!</p>\n\n\n\n\n\n<p><strong>Spark can perform up to 100x faster than Hadoop MapReduce</strong>, which has caused an explosion in demand for this skill! Because the <strong>Spark 2.0 DataFrame </strong>framework is so new, you now have the ability to quickly become one of the most knowledgeable people in the job market!</p>\n\n\n\n\n\n<p>This course will teach the basics with a crash course in Python, continuing on to learning how to use Spark DataFrames with the latest Spark 2.0 syntax! Once we've done that we'll go through how to use the MLlib Machine Library with the DataFrame syntax and Spark. All along the way you'll have exercises and Mock Consulting Projects that put you right into a real world situation where you need to use your new skills to solve a real problem!</p>\n\n\n\n\n\n<p>We also cover the latest Spark Technologies, like Spark SQL, Spark Streaming, and advanced models like Gradient Boosted Trees! After you complete this course you will feel comfortable putting Spark and PySpark on your resume! This course also has a full 30 day money back guarantee and comes with a LinkedIn Certificate of Completion!</p>\n\n\n\n\n\n<p>If you're ready to jump into the world of Python, Spark, and Big Data, this is the course for you!</p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T07:43:21Z",
        "enrollment_time": "2021-11-18T19:28:58Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 3990068,
        "title": "Domain Driven Design & Microservices for Architects",
        "url": "/course/domain-driven-design-and-microservices/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 16296260,
            "title": "Rajeev Sakhuja",
            "name": "Rajeev",
            "display_name": "Rajeev Sakhuja",
            "job_title": "11xAWS Certified, Consultant, Mentor, Innovation evangelist"
          }
        ],
        "published_title": "domain-driven-design-and-microservices",
        "tracking_id": "XqpffNdkSUeveZbwcHhdUQ",
        "description": "<p><strong>PS:&nbsp;Focus is on designing Microservices not coding </strong></p><ul><li><p>No specific Microservices framework in use</p></li><li><p>All sample code is in plain JAVA to demonstrate/clarify understanding of DDD patterns, etc.</p></li><li><p>Models are developed in UML&nbsp;- using the PlantUML&nbsp;tool</p></li><li><p>PostgreSQL/MongDB/RabbitMQ/Kafka - free instances created on the cloud for demos &amp;&nbsp;walkthroughs</p></li></ul><p><em>PLEASE&nbsp;Do NOT&nbsp;join the course if you are looking for tutorials on Microservices Coding or specific framework!!!</em></p><p><strong>What is this course about?</strong></p><p>Microservices is a new way of building software in which an application is composed of an <em>independent </em>set of services. The biggest benefit of Microservices is that it enables an organization to transform at a very rapid pace. This speed to market is achieved due to the <em>independent </em>nature of the services that make up a Microservices application. Companies like Amazon, Netflix and Etsy have proven the value of Microservices beyond doubt.</p><p>Many organizations today are looking to adopt Microservices. These organizations are investing in technologies, tools, skills and are changing their software development and delivery processes as well. But still many organizations are failing to achieve the full benefits of Microservices; in fact many organizations feel that they have created technical debt by adopting Microservices. </p><p><em>So why is it that some organizations have been successful in adopting Microservices while others are not</em>. One common aspect I have observed in companies that fail to adopt Microservices is that they treat Microservices as a purely technology initiative. They do not spend time in understanding the business aspects of their Microservices applications&nbsp; !!!</p><p><br></p><p><strong>Microservices is NOT&nbsp;just about technology</strong></p><p>The key element of the Microservices architecture is that services are <strong>Independent</strong>. This independent aspect of the service is what makes it possible for Microservices to change independently of other services. If scope of the microservices is leading to inter-dependencies between services then it would lead to a need for change coordination between teams which in turn will lead to the same problems we have with Monolithic applications !!! Release cycles will be longer and there will be no benefit of the adoption of Microservices. </p><p>To ensure that these is no interdependencies between Microservices, a Microservices architect needs to understand the domain and then decide on the boundary and scope of the Microservices. This is where <em>Domain Driven Design </em> comes into picture. Once the Microservices business boundaries are defined the services should be built using appropriate <em>Microservices design patterns</em> and technologies.</p><p>Teams working on Microservices should not just look at the technical aspects of the service but MUST keep in mind that there are other considerations that play a critical part in the success of Microservices initiative. In order to</p><p><br></p><p><strong>Role of a Microservices Architect</strong></p><p>An IT&nbsp;professional working in the role of Microservices architect is responsible for may aspects depending on the maturity of Microservices adoption in their organization. Here are the list of activities that the architects is responsible for:</p><ul><li><p>Evaluate the business benefits of Microservices for their specific organization</p></li><li><p>Build a Business case for Microservices</p></li><li><p>Educate the Business &amp;&nbsp;IT&nbsp;stakeholders on pros/cons of Microservices</p></li><li><p>Apply Domain Driven Design to demarcate the boundaries of Microservices</p></li><li><p>Define the domain model for the Microservices</p></li><li><p>Do the technical design of Microservices</p></li><li><p>Guide and Mentor the Microservices teams</p></li><li><p>Evaluate the technologies | frameworks for the realization of Microservices</p></li><li><p>Build proof of concepts to show how things work</p></li></ul><p><strong>How will this course help?</strong></p><p>This course will help developers &amp; architects in building skills needed for successful implementation of Microservices applications. It consists of a combination of concepts, UML&nbsp;modelling and working code to demonstrate the implementation of Microservices. Students will learn the concepts of Domain driven design by way of common industry examples and a case study (ACME&nbsp;travels).&nbsp; </p><p><br></p><p>Focus is on Architecture, Design and Development of Microservices. </p><p><br></p><p>1. Transformation &amp;&nbsp;Microservices</p><p>2. Domain Driven Design</p><p>3. Applying the DDD strategic &amp;&nbsp;tactical pattern</p><p>4. Event Driven Architecture</p><p>5. Event Storming</p><p>6. Data Management</p><p>7. Messaging</p><p>8. Distributed Transactions</p><p>9. API</p><p><br></p><p><strong><em>IMPORTANT: </em></strong></p><p><strong>Code Samples</strong></p><p>Focus is on the Microservices design not coding.</p><ul><li><p>All of the sample code is in plain JAVA</p></li><li><p>Course does NOT&nbsp;cover any specific framework</p></li><li><p>SpringBoot is used in samples for API/GraphQL section</p></li></ul><p><strong><em>Please check out the course preview lectures before enrolling the course.</em></strong></p><ul><li><p>Review the topics covered</p></li><li><p>Make sure you understand instructor's accent</p></li></ul><p><br></p><p><strong>Pre-Requisites</strong></p><ul><li><p>Basic understanding of JAVA or any other programming language</p></li><li><p>Some experience with software development practices</p></li></ul><p><strong>PS:</strong></p><p>Hand on part is optional but students are encouraged to do hands on tasks to get a better feel of the design patterns.</p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T07:41:09Z",
        "enrollment_time": "2021-11-18T19:28:57Z",
        "num_collections": 1
      },
      {
        "_class": "course",
        "id": 2093784,
        "title": "Refactoring to Design Patterns by Example",
        "url": "/course/refactoring-to-patterns/learn/",
        "visible_instructors": [
          {
            "_class": "user",
            "id": 57626100,
            "title": "Zoran Horvat",
            "name": "Zoran",
            "display_name": "Zoran Horvat",
            "job_title": "CEO and Principal Consultant at Coding Helmet s.p.r.l."
          }
        ],
        "published_title": "refactoring-to-patterns",
        "tracking_id": "Mr82lYeTTP6foJz7POSBcQ",
        "description": "<p>This course begins with examination of a realistic application, which is poorly factored and doesn't incorporate design patterns. The demo application converts text into subtitles for videos, which makes it quite useful in practice. Yet, it is nearly impossible to maintain and develop this application further, due to its poor structure and design.</p><p>That is the point at which the course begins. As demonstration after demonstration will unfold, we will refactor this entire application, one function and one class at a time. During refactoring, many design patterns will fit into place almost without effort. By the end of the course, you will know how code refactoring and design patterns - one coding practice and one design practice - can operate together and help each other create great design.</p>",
        "completion_ratio": 0,
        "last_accessed_time": "2022-03-11T07:40:25Z",
        "enrollment_time": "2021-11-18T19:28:57Z",
        "num_collections": 1
      }
    ]
  }